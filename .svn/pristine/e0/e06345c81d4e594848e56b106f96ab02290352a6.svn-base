package com.wangqingbo.test;

import java.io.IOException;
import java.io.Reader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.apache.log4j.Logger;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.wangqingbo.entity.ProjectInfo;
import com.wangqingbo.mapper.ProjectInfoMapper;

/**
 * MyBatis测试类
 * @author Administrator
 *
 */
public class MyBatisTest
{
	// 初始化日志
	private static final Logger LOG = Logger.getLogger(MyBatisTest.class);

	public static void main(String[] args)
	{
		MyBatisTest t = new MyBatisTest();
		t.queryAllProjectPage();
	}
	
	/**
	 * 查询所有的项目信息
	 */
	public void queryAllProject()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 调用接口的方法，调用resultType的方式
			List<ProjectInfo> list = mapper.queryAllProjectInfo();
			// 调用resultMap的方式
			//List<ProjectInfo> list = mapper.queryAllProjectInfoResultMap();
			// 处理日期格式
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			// 打印
			if (list != null && list.size() > 0)
			{
				for (ProjectInfo prj : list)
				{
					System.out.println(prj.getProjectName() + "," + sdf.format(prj.getStartTime()));
				}
			}
			
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	/**
	 * 查询所有的项目信息，分页
	 */
	public void queryAllProjectPage()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 设置分页参数，两个参数，参数一：当前页，参数二：pageSize，每页显示的数据条数
			// 要写在查询方法之前
			PageHelper.startPage(5, 15);
			// 调用接口的方法，调用resultType的方式
			List<ProjectInfo> list = mapper.queryAllProjectInfo();
			// 封装分页信息，完成分页
			PageInfo<ProjectInfo> pageInfo = new PageInfo<ProjectInfo>(list);
			// 打印分页信息
			System.out.println("总页数：" + pageInfo.getPages());
			System.out.println("数据总条数：" + pageInfo.getTotal());
			System.out.println("当前页：" + pageInfo.getPageNum());
			System.out.println("每页显示条数：" + pageInfo.getPageSize());
			// 调用resultMap的方式
			//List<ProjectInfo> list = mapper.queryAllProjectInfoResultMap();
			// 处理日期格式
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			List<ProjectInfo> listPage = pageInfo.getList();
			// 打印
			if (listPage != null && listPage.size() > 0)
			{
				for (ProjectInfo prj : listPage)
				{
					System.out.println(prj.getProjectName() + "," + sdf.format(prj.getStartTime()));
				}
			}
			
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 查询所有的项目信息,项目名称模糊查询
	 */
	public void queryProjectByPrjName()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 调用接口的方法
			List<ProjectInfo> list = mapper.queryProjectInfoByPrjName("%3%");
			// 打印
			if (list != null && list.size() > 0)
			{
				for (ProjectInfo prj : list)
				{
					System.out.println(prj.getProjectName());
				}
			}
			
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 查询所有的项目信息,多个参数
	 */
	public void queryProjectByParams()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 调用接口的方法
			List<ProjectInfo> list = mapper.queryProjectInfoByParams("%3%", "%3%",590.23);
			// 打印
			if (list != null && list.size() > 0)
			{
				for (ProjectInfo prj : list)
				{
					System.out.println(prj.getProjectName() + "," + prj.getProjectTotal());
				}
			}
			
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 查询所有的项目信息,参数使用对象的方式传递
	 */
	public void queryProjectByObject()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 构造一个对象作为参数
			ProjectInfo param = new ProjectInfo();
			param.setProjectName("%2%");
			param.setProjectCode("%3%");
			param.setProjectTotal(500.12);
			// 调用接口的方法
			List<ProjectInfo> list = mapper.queryProjectInfoByObject(param);
			// 打印
			if (list != null && list.size() > 0)
			{
				for (ProjectInfo prj : list)
				{
					LOG.info(prj.getProjectName() + "," + prj.getProjectTotal());
					System.out.println(prj.getProjectName() + "," + prj.getProjectTotal());
				}
			}
			
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 保存项目信息
	 */
	public void saveProjectByObject()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 构造一个对象作为参数
			ProjectInfo param = new ProjectInfo();
			param.setProjectName("20180929MyBatis测试名称");
			param.setProjectCode("MyBatis002");
			param.setProjectUnit("南昌市政府");
			param.setStartTime(new Date());
			param.setEndTime(new Date());
			// 调用接口的方法
			mapper.saveProjectInfo(param);
			// 保存成功后，对象的主键会返回过来
			System.out.println(param.getProjectId());
			// 提交事务
			session.commit();
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 更新项目信息
	 */
	public void updateProjectByObject()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 构造一个对象作为参数
			ProjectInfo param = new ProjectInfo();
			// 更新的时候，要设置id，并且id一定要在数据库中存在
			param.setProjectId("40288001660e7f5601660e7f59cc0001");
			param.setProjectName("修改项目测试");
			param.setProjectCode("MyBatis003");
			// 调用接口的方法
			mapper.updateProjectInfo(param);
			// 提交事务
			session.commit();
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 删除项目信息
	 */
	public void deleteProjectByObject()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 调用接口的方法
			mapper.deleteProjectInfo("40288001660e7f5601660e7f59cc0001");
			// 提交事务
			session.commit();
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 查询所有的项目信息,参数使用对象的方式传递
	 */
	public void queryProjectByDyParams()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			// 调用接口的方法
			List<ProjectInfo> list = mapper.queryProjectDySqlChoose("%3%", "%j%", 300d);
			// 打印
			if (list != null && list.size() > 0)
			{
				for (ProjectInfo prj : list)
				{
					LOG.info(prj.getProjectName() + "," + prj.getProjectTotal());
					System.out.println(prj.getProjectName() + "," + prj.getProjectTotal());
				}
			}
			
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 删除项目信息
	 */
	public void deleteMultiProject()
	{
		try
		{
			// 加载配置文件
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			// 创建sqlSessionFactory
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
			// 创建sqlSession
			SqlSession session = factory.openSession();
			// 获取mapper接口,getMapper方法中传一个参数，参数为mapper接口的类
			ProjectInfoMapper mapper = session.getMapper(ProjectInfoMapper.class);
			List<String> delList = new ArrayList<String>();
			delList.add("40288001660e7f5601660e7f59dc0005");
			delList.add("40288001660e7f5601660e7f59dc0006");
			delList.add("40288001660e7f5601660e7f59dc0007");
			// 调用接口的方法
			int num = mapper.deleteMultiProjects(delList);
			System.out.println("删除数量：" + num);
			// 提交事务
			session.commit();
			// 关闭sqlSession
			session.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

}
